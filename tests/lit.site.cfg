# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os
import sys
import re
import platform

import lit.util
import lit.formats

lit_config.note('using Python {}'.format(sys.version))

# name: The name of this test suite.
config.name = 'unrarall'

# Use external shell for execution
config.test_format = lit.formats.ShTest(execute_external=True)

# suffixes: A list of file extensions to treat as test files. This is overriden
# by individual lit.local.cfg files in the test subdirectories.
config.suffixes = ['.test']

# excludes: A list of directories to exclude from the testsuite. The 'Inputs'
# subdirectories contain auxiliary inputs for various tests in their parent
# directories.
config.excludes = []

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(os.path.abspath(__file__))

# test_exec_root: The root path where tests should be run.
config.test_exec_root = config.test_source_root

# Propagate 'HOME' through the environment.
if 'HOME' in os.environ:
    config.environment['HOME'] = os.environ['HOME']

# Propagate the temp directory
if 'TMP' in os.environ:
    config.environment['TMP'] = os.environ['TMP']
if 'TEMP' in os.environ:
    config.environment['TEMP'] = os.environ['TEMP']

# Propagate PYTHON_EXECUTABLE into the environment
config.environment['PYTHON_EXECUTABLE'] = getattr(config, 'python_executable', '')

# Check that the object root is known.
if config.test_exec_root is None:
    lit_config.fatal('Could not determine execution root for tests!')

"""
   Function for quoting filepaths
   so that if they contain spaces
   lit's shell interpreter will
   treat the path as a single argument
"""
def quotePath(path):
    if ' ' in path:
        return '"{path}"'.format(path=path)
    else:
        return path

# Find unrarall
up = os.path.dirname
repository_root = up(
                     up( os.path.abspath(__file__) )
                   )
lit_config.note('Repository root is {}'.format(repository_root))

unrarall_executable = os.path.join(repository_root, 'unrarall')

if not os.path.exists(unrarall_executable):
    lit_config.fatal('Could not find unrarall at {}'.format(unrarall_executable))

unrarall_executable = quotePath(unrarall_executable)


# Add dummy substitution that we can fill in later. It's important
# that we add this first due to the way lit handles substitutions
# (i.e. `%unrarall` should appear before `%unrar`).
config.substitutions.append( ('%unrarall', None) )

# Find not utility
not_executable = os.path.join(repository_root, 'tests', 'not.sh')
if not os.path.exists(not_executable):
  lit_config.fatal('Could not find "{}"'.format(not_executable))

config.substitutions.append( ('%not', not_executable))

# Detect available tools and declare them as available features
def handle_binary(name):
  assert isinstance(name, str)
  assert len(name) > 0
  assert name.count(' ') == 0
  binary_path = lit.util.which(name)
  if binary_path is not None:
    feature_name = '{}_binary'.format(name)
    lit_config.note('{} is an available feature'.format(feature_name))
    config.available_features.add(feature_name)
    config.substitutions.append(('%{}'.format(name), binary_path))
    lit_config.note('Found "{}" at "{}"'.format(name, binary_path))
  else:
    feature_name = 'not-{}'.format(name)
    config.available_features.add(feature_name)
    lit_config.note('{} is an available feature'.format(feature_name))

handle_binary('unrar')
handle_binary('7z')
handle_binary('rar')
handle_binary('cfv')
handle_binary('cksfv')

# Workout which backend to test
unrarall_backend = lit_config.params.get('unrarall_backend', 'auto')
valid_backends = {'unrar', 'rar', '7z', 'auto'}
if unrarall_backend not in valid_backends:
  lit_config.fatal('"{}" is not a valid backend ({})'.format(unrarall_backend, valid_backends))

# Set unrarall flags appropriately for the backend being used and
# check the backend is available.
lit_config.note('Using "{}" backend'.format(unrarall_backend))
if unrarall_backend == 'unrar':
  if 'unrar_binary' not in config.available_features:
    lit_config.fatal('unrar binary is required to test unrar backend')
  unrarall_executable = unrarall_executable + ' --backend=unrar'
elif unrarall_backend == '7z':
  if '7z_binary' not in config.available_features:
    lit_config.fatal('7z binary is required to test 7z backend')
  unrarall_executable = unrarall_executable + ' --backend=7z'
elif unrarall_backend == 'rar':
  if 'rar_binary' not in config.available_features:
    lit_config.fatal('rar binary is required to test rar backend')
  unrarall_executable = unrarall_executable + ' --backend=rar'
elif unrarall_backend == 'auto':
  if ('unrar_binary' not in config.available_features and
      '7z_binary' not in config.available_features and
      'rar_binary' not in config.available_features):
      lit_config.fatal('unrar, rar, or 7z binary required')
else:
  lit_config.fatal('"{}" is not a supported backend'.format(unrarall_backend))

# Add relevant features depending on the backend in use
if unrarall_backend != 'auto':
  for backend in valid_backends:
    if unrarall_backend == backend:
      config.available_features.add('{}_backend'.format(backend))
    else:
      config.available_features.add('not-{}_backend'.format(backend))
else:
  # If using auto we don't know what backend unrarall will pick. We could
  # duplicate the logic here so we know which features to set but for
  # simplicity don't do this.
  lit_config.note('Letting unrarall automatically choose its backend')

# Allow user to provide extra arguments to unrarall
unrarall_args = lit_config.params.get('unrarall_args','')
if len(unrarall_args) > 0:
  if unrarall_args.count('-7') != 0 or unrarall_args.count('--7zip') != 0:
    lit_config.fatal('Cannot pass 7z flags to unrarall. Set `unrarall_backend` instead')
  if unrarall_args.count('--backend=') != 0:
    lit_config.fatal('Cannot pass --backend= flag to unrarall. Set `unrarall_backend` instead')
  unrarall_executable = unrarall_executable + ' ' + unrarall_args

# Inform user what executable is being used
lit_config.note('Using unrarall: {}\n'.format(unrarall_executable))

index_of_unrarall_substitution = -1
for index, tuple in enumerate(config.substitutions):
  if tuple[0] == '%unrarall':
    index_of_unrarall_substitution = index
if index_of_unrarall_substitution == -1:
  lit_config.fatal('Failed to find existing %unrarall substitution')

# Set the subsititution for unrarall
config.substitutions[index_of_unrarall_substitution] = ('%unrarall', unrarall_executable)

# Set `find` substitution
config.substitutions.append(('%find', 'find'))

# Detect the OutputCheck tool
output_check_path = lit.util.which('OutputCheck')
if output_check_path == None:
    lit_config.fatal('The OutputCheck tool is not in your PATH. Please install it.')

config.substitutions.append( ('%OutputCheck', output_check_path + ' --dump-file-to-check --comment="#"') )
